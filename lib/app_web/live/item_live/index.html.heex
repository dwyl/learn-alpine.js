<.h1 class="text-lg text-center font-bold">Listing Items</.h1>

<%= if @live_action in [:new, :edit] do %>
  <.modal return_to={Routes.item_index_path(@socket, :index)} title="Item">
    <.live_component
      module={AppWeb.ItemLive.FormComponent}
      id={@item.id || :new}
      title={@page_title}
      action={@live_action}
      item={@item}
      return_to={Routes.item_index_path(@socket, :index)}
    />
  </.modal>
<% end %>

<.table class="mt-3">
  <thead>
    <.tr>
      <.th>Text</.th>
      <.th>Index</.th>
    </.tr>
  </thead>
  <tbody id="items" x-data="{dragged: null}" x-ref="items" phx-hook="SortList">
    <%= for item <- @items do %>
      <.tr
        id={"item-#{item.id}"}
        data-id={item.id}
        draggable="true"
        class="cursor-grab draggable"
        x-data="dragAndDrop"
        x-on:dragstart.self="dragging = true; dragged = $el;"
        x-on:dragend.self="dragging = false; dragover = false; dragged = null"
        @dragover="dragover = true; dragElt(dragged, $el)"
        @dragleave="dragover = false"
        @drop="dragover = false; notifyServer()"
        @drop.outside="notifyServer()"
        x-bind:class="dragover ? '!bg-green-100' : (dragging && '!bg-red-100'); dragging && 'cursor-grabbing'"
      >
        <.td class=""><%= item.text %></.td>
        <.td><%= item.index %></.td>
      </.tr>
    <% end %>
  </tbody>
</.table>

<.button
  link_type="live_patch"
  to={Routes.item_index_path(@socket, :new)}
  class="mt-3"
  label="New Item"
/>

<script>
  const event = new Event('sortListEvent');
  document.addEventListener('alpine:init', () => {
      Alpine.data('dragAndDrop', () => ({
          open: false,
          dragover: false,
          dragging: false,

        dragElt(dragged, overItem) {
           const listItems = [...document.querySelectorAll(".draggable")]
           if (listItems.indexOf(dragged) < listItems.indexOf(overItem)) {
             items.insertBefore(dragged, overItem.nextSibling) 
           } else {
             items.insertBefore(dragged, overItem) 
           }
         },

        notifyServer() {

          document.querySelector('#items').dispatchEvent(event)
        }

      }))
  })
</script>
